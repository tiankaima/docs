{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Note Email address: tiankaima@163.com Get pass the anti-spam filter by not changing the title. Developers wanted \u00b6 Note You can contribute to this site by adding your own markdown page to this repo , just make a PR and I'll get in touch with you. I had a dream to build a forum-like discussion website for developers to exchange their ideas, without ads or anything. But everything comes with a cost, so instead, I made this Github Page site, hoping to publish some of the work I'm focusing on, and if that inspires you, even a bit, I hope you can give me a star for that :( Update Log: \u00b6 2022/3/9 Log : Add Giscus Support You can now use Giscus to comment on the bottom of the page. Also Github Action bot is enabled, so you don't have to run the build code on my own computer...LOL 2022/2/7 Log : Basic framework setup. TODO List: add requirement.txt and keep maintenance Change a bit UI to make it look better ..?","title":"Welcome"},{"location":"#welcome","text":"Note Email address: tiankaima@163.com Get pass the anti-spam filter by not changing the title.","title":"Welcome"},{"location":"#developers-wanted","text":"Note You can contribute to this site by adding your own markdown page to this repo , just make a PR and I'll get in touch with you. I had a dream to build a forum-like discussion website for developers to exchange their ideas, without ads or anything. But everything comes with a cost, so instead, I made this Github Page site, hoping to publish some of the work I'm focusing on, and if that inspires you, even a bit, I hope you can give me a star for that :(","title":"Developers wanted"},{"location":"#update-log","text":"2022/3/9 Log : Add Giscus Support You can now use Giscus to comment on the bottom of the page. Also Github Action bot is enabled, so you don't have to run the build code on my own computer...LOL 2022/2/7 Log : Basic framework setup. TODO List: add requirement.txt and keep maintenance Change a bit UI to make it look better ..?","title":"Update Log:"},{"location":"BugFixs/2022-2-7/","text":"2022-2-7 \u00b6 While using electron-ssr an error was spotted, feedbacks were: Thread **** could not be stopped, turn down manually Log feedbacks are: Getting AttributeError : module 'collections' has no attribute 'MutableMapping' while using any pip3 command on linux Python 3.10 This error further triggers the electron-side to other problems. Problem addressing: \u00b6 Note This might be a common issue with updating from Python3.9 to Python3.10. The script reported the error was located here: ~\\AppData\\Roaming\\electron-ssr\\shadowsocksr\\shadowsocks\\lru_cache.py Line 44, problem occurs here: class LRUCache ( collections . MutableMapping ): To fix, thanks to an answer from stackoverflow , is to change the line into: class LRUCache ( collections . abc . MutableMapping ): Please notice that on stackoverflow, the highlighted answer is NOT correct, the problem could not be fixed updating pip. Further actions: \u00b6 Note This solution is implemented in PR here: https://github.com/shadowsocks/shadowsocks/pull/1489, although this PR could never be merged because of some obvious reasons.","title":"2022-2-7"},{"location":"BugFixs/2022-2-7/#2022-2-7","text":"While using electron-ssr an error was spotted, feedbacks were: Thread **** could not be stopped, turn down manually Log feedbacks are: Getting AttributeError : module 'collections' has no attribute 'MutableMapping' while using any pip3 command on linux Python 3.10 This error further triggers the electron-side to other problems.","title":"2022-2-7"},{"location":"BugFixs/2022-2-7/#problem-addressing","text":"Note This might be a common issue with updating from Python3.9 to Python3.10. The script reported the error was located here: ~\\AppData\\Roaming\\electron-ssr\\shadowsocksr\\shadowsocks\\lru_cache.py Line 44, problem occurs here: class LRUCache ( collections . MutableMapping ): To fix, thanks to an answer from stackoverflow , is to change the line into: class LRUCache ( collections . abc . MutableMapping ): Please notice that on stackoverflow, the highlighted answer is NOT correct, the problem could not be fixed updating pip.","title":"Problem addressing:"},{"location":"BugFixs/2022-2-7/#further-actions","text":"Note This solution is implemented in PR here: https://github.com/shadowsocks/shadowsocks/pull/1489, although this PR could never be merged because of some obvious reasons.","title":"Further actions:"},{"location":"Defold/basic/","text":"Defold Basic \u00b6 Notes: When I was wrote this, I was quite enthusiastic about developing my own game, so I came across defold engine, which, I took some time to find out, is complete garbage.(Sorry for using such strong words...) So I basically started this page writing about some basic grammar in Lua, hoping to help me with the development process, so you might want to see the official docs about the defold engine here . 1. Introduction \u00b6 Defold is a game engine that allows you to create games for mobile devices (and desktop environments). Note Platforms that are supported: Windows, Android, iOS, macOS, HTML5, Linux. Official manuals can be found here:https://defold.com/manuals 2. Getting Started \u00b6 See website: https://defold.com/manuals/introduction/ Note Setup Defold engine and create a project, then continue reading. 3. Lua basic \u00b6 Lua is kind of unique compared to other languages, I wouldn't recommend Lua for beginners. Hopefully you have another language for reference. It is lightweight, small, also powerful at the same time. Some of its grammar looks like Javascript(in a way), some looks like Python. Most feature Lua support are derived from the its C Library, so extensibility is not bad. Also, Lua is procedure oriented, and use functional programming style. Note About Lua, you can find all the information here: https://www.lua.org/ Here's something to help you get started with the Lua language. 1. Comment style \u00b6 -- This is a one-line comment --[[ This is a multi-line comment --]] 2. Naming conventions \u00b6 Naming in Lua is capital-sensitive, and should not start with numbers, the following are examples of legal names: mohd zara abc move_name a_123 myname50 _temp j a23b9 retVal 3. Reserved names \u00b6 and break do else elseif end false for function if in local nil not or repeat return then true until while Warning These names are not allowed as variable names or function names. 4. Scope \u00b6 Lua is a dynamic language, so variables are not bound to a scope. Note That means all variable are created to be \"global\", and referencing from a non-existing variable will return nil.(Instead of rasing a error) Example here: > print ( b ) nil > b = 10 > print ( b ) 10 > To delete a variable, use the =nil syntax. > a = 10 > a = nil > print ( a ) nil 5. Variables types \u00b6 - Numbers - Strings - Booleans - Tables - Functions - Userdata - Threads - Nil Note Like Python, use type() to find out the type of a variable. Example here: type(a) --> nil 5.1 Numbers \u00b6 In lua, there's no int type, all variables are floating point numbers. All following examples are valid: print ( type ( 2 )) print ( type ( 2.2 )) print ( type ( 0.2 )) print ( type ( 2e+1 )) print ( type ( 0.2e-1 )) print ( type ( 7.8263692594256e-06 )) 5.2. Strings \u00b6 In Lua, Strings are quoted in \" or ' , both are valid and equivalent. print ( \"Hello World\" ) print ( 'Hello World' ) Also, for multi-line string, use [[]] instead of \"\" . print ( [[ Hello World ]] ) Warning Attempting to run arithmetic operations on a string will NOT result in an error . Instead, it will try to convert the string into a number > print ( \"2\" + 6 ) 8.0 > print ( \"2\" + \"6\" ) 8.0 > print ( \"2 + 6\" ) 2 + 6 > print ( \"-2e2\" * \"6\" ) - 1200.0 > print ( \"error\" + 1 ) stdin : 1 : attempt to perform arithmetic on a string value stack traceback : stdin : 1 : in main chunk [ C ]: in ? Note Then rasing the problem to connect two strings head to tail, use .. instead of + . print(\"2\" .. \"6\") --> 26 Tip A unique grammar in Lua to calculate the length of a string is to put # in front of the string. print(#\"Hello World\") --> 11 5.3. Booleans \u00b6 Warning Boolean type in Lua is a bit different from other languages. Pay attention! There are only two kinds of boolean values: true and false. ALL values except for false or nil are true !!! print ( type ( true )) print ( type ( false )) print ( type ( nil )) if false or true then print ( \"true\" ) else print ( \"false\" ) end --> false Number type in Lua cannot directly be used as 0->false equivalent. 5.4. Tables \u00b6 Table is the only data structure in Lua. Note Table is a collection of key-value pairs. Using hash-algorithm make its performance is much better than array. To create a table, directly use: local t = {} or, to construct the table, use\uff1b local t = { key1 = \"value1\" , key2 = \"value2\" } Tables in Lua is actually a associative arrays , which means it can be accessed by key. local t = { key1 = \"value1\" , key2 = \"value2\" } print ( t . key1 ) --> value1 print ( t . key2 ) --> value2 This means that Numbers and Strings are both valid keys, and \"10\" and 10 are different keys. Note In this way the table can be used as a dict(as in Python) or as a set(as in Java). Also you could use it as a array, but it is not recommended. Notice that there are another way to construct a table, which do not have keys. local t = { 1 , 2 , 3 , 4 , 5 } print ( t [ 1 ]) --> 1 Error Differ from most programming language, Lua starts counting from 1, not from 0. table do not have a fixed size, so you can add or remove elements from it. Tip That means adding or removing a value is the same as global variables. Example here: t={} t[1] = \"value1\" print(t[1]) --> value1 t[1] = nil print(t[1]) --> nil print(t[2]) --> nil I hope this clears things out. 5.5. Functions \u00b6 In Lua, functions are considered a first-class value , that means it could be stored in variables. function factorial1 ( n ) if n == 0 then return 1 else return n * factorial1 ( n - 1 ) end end print ( factorial1 ( 5 )) factorial2 = factorial1 print ( factorial2 ( 5 )) Functions could be passed through as anonymous functions. function anonymous ( tab , fun ) for k , v in pairs ( tab ) do print ( fun ( k , v )) end end tab = { key1 = \"val1\" , key2 = \"val2\" } anonymous ( tab , function ( key , val ) return key .. \" = \" .. val end ) 5.6. Userdata \u00b6 Userdata is a way to store a C-like structure in Lua. Not commonly used by starters. 5.7. Threads \u00b6 In Lua is no thread, but coroutine. Not commonly used by starters. 6. \u00b6","title":"Defold Basic"},{"location":"Defold/basic/#defold-basic","text":"Notes: When I was wrote this, I was quite enthusiastic about developing my own game, so I came across defold engine, which, I took some time to find out, is complete garbage.(Sorry for using such strong words...) So I basically started this page writing about some basic grammar in Lua, hoping to help me with the development process, so you might want to see the official docs about the defold engine here .","title":"Defold Basic"},{"location":"Defold/basic/#1-introduction","text":"Defold is a game engine that allows you to create games for mobile devices (and desktop environments). Note Platforms that are supported: Windows, Android, iOS, macOS, HTML5, Linux. Official manuals can be found here:https://defold.com/manuals","title":"1. Introduction"},{"location":"Defold/basic/#2-getting-started","text":"See website: https://defold.com/manuals/introduction/ Note Setup Defold engine and create a project, then continue reading.","title":"2. Getting Started"},{"location":"Defold/basic/#3-lua-basic","text":"Lua is kind of unique compared to other languages, I wouldn't recommend Lua for beginners. Hopefully you have another language for reference. It is lightweight, small, also powerful at the same time. Some of its grammar looks like Javascript(in a way), some looks like Python. Most feature Lua support are derived from the its C Library, so extensibility is not bad. Also, Lua is procedure oriented, and use functional programming style. Note About Lua, you can find all the information here: https://www.lua.org/ Here's something to help you get started with the Lua language.","title":"3. Lua basic"},{"location":"Defold/basic/#1-comment-style","text":"-- This is a one-line comment --[[ This is a multi-line comment --]]","title":"1. Comment style"},{"location":"Defold/basic/#2-naming-conventions","text":"Naming in Lua is capital-sensitive, and should not start with numbers, the following are examples of legal names: mohd zara abc move_name a_123 myname50 _temp j a23b9 retVal","title":"2. Naming conventions"},{"location":"Defold/basic/#3-reserved-names","text":"and break do else elseif end false for function if in local nil not or repeat return then true until while Warning These names are not allowed as variable names or function names.","title":"3. Reserved names"},{"location":"Defold/basic/#4-scope","text":"Lua is a dynamic language, so variables are not bound to a scope. Note That means all variable are created to be \"global\", and referencing from a non-existing variable will return nil.(Instead of rasing a error) Example here: > print ( b ) nil > b = 10 > print ( b ) 10 > To delete a variable, use the =nil syntax. > a = 10 > a = nil > print ( a ) nil","title":"4. Scope"},{"location":"Defold/basic/#5-variables-types","text":"- Numbers - Strings - Booleans - Tables - Functions - Userdata - Threads - Nil Note Like Python, use type() to find out the type of a variable. Example here: type(a) --> nil","title":"5. Variables types"},{"location":"Defold/basic/#51-numbers","text":"In lua, there's no int type, all variables are floating point numbers. All following examples are valid: print ( type ( 2 )) print ( type ( 2.2 )) print ( type ( 0.2 )) print ( type ( 2e+1 )) print ( type ( 0.2e-1 )) print ( type ( 7.8263692594256e-06 ))","title":"5.1 Numbers"},{"location":"Defold/basic/#52-strings","text":"In Lua, Strings are quoted in \" or ' , both are valid and equivalent. print ( \"Hello World\" ) print ( 'Hello World' ) Also, for multi-line string, use [[]] instead of \"\" . print ( [[ Hello World ]] ) Warning Attempting to run arithmetic operations on a string will NOT result in an error . Instead, it will try to convert the string into a number > print ( \"2\" + 6 ) 8.0 > print ( \"2\" + \"6\" ) 8.0 > print ( \"2 + 6\" ) 2 + 6 > print ( \"-2e2\" * \"6\" ) - 1200.0 > print ( \"error\" + 1 ) stdin : 1 : attempt to perform arithmetic on a string value stack traceback : stdin : 1 : in main chunk [ C ]: in ? Note Then rasing the problem to connect two strings head to tail, use .. instead of + . print(\"2\" .. \"6\") --> 26 Tip A unique grammar in Lua to calculate the length of a string is to put # in front of the string. print(#\"Hello World\") --> 11","title":"5.2. Strings"},{"location":"Defold/basic/#53-booleans","text":"Warning Boolean type in Lua is a bit different from other languages. Pay attention! There are only two kinds of boolean values: true and false. ALL values except for false or nil are true !!! print ( type ( true )) print ( type ( false )) print ( type ( nil )) if false or true then print ( \"true\" ) else print ( \"false\" ) end --> false Number type in Lua cannot directly be used as 0->false equivalent.","title":"5.3. Booleans"},{"location":"Defold/basic/#54-tables","text":"Table is the only data structure in Lua. Note Table is a collection of key-value pairs. Using hash-algorithm make its performance is much better than array. To create a table, directly use: local t = {} or, to construct the table, use\uff1b local t = { key1 = \"value1\" , key2 = \"value2\" } Tables in Lua is actually a associative arrays , which means it can be accessed by key. local t = { key1 = \"value1\" , key2 = \"value2\" } print ( t . key1 ) --> value1 print ( t . key2 ) --> value2 This means that Numbers and Strings are both valid keys, and \"10\" and 10 are different keys. Note In this way the table can be used as a dict(as in Python) or as a set(as in Java). Also you could use it as a array, but it is not recommended. Notice that there are another way to construct a table, which do not have keys. local t = { 1 , 2 , 3 , 4 , 5 } print ( t [ 1 ]) --> 1 Error Differ from most programming language, Lua starts counting from 1, not from 0. table do not have a fixed size, so you can add or remove elements from it. Tip That means adding or removing a value is the same as global variables. Example here: t={} t[1] = \"value1\" print(t[1]) --> value1 t[1] = nil print(t[1]) --> nil print(t[2]) --> nil I hope this clears things out.","title":"5.4. Tables"},{"location":"Defold/basic/#55-functions","text":"In Lua, functions are considered a first-class value , that means it could be stored in variables. function factorial1 ( n ) if n == 0 then return 1 else return n * factorial1 ( n - 1 ) end end print ( factorial1 ( 5 )) factorial2 = factorial1 print ( factorial2 ( 5 )) Functions could be passed through as anonymous functions. function anonymous ( tab , fun ) for k , v in pairs ( tab ) do print ( fun ( k , v )) end end tab = { key1 = \"val1\" , key2 = \"val2\" } anonymous ( tab , function ( key , val ) return key .. \" = \" .. val end )","title":"5.5. Functions"},{"location":"Defold/basic/#56-userdata","text":"Userdata is a way to store a C-like structure in Lua. Not commonly used by starters.","title":"5.6. Userdata"},{"location":"Defold/basic/#57-threads","text":"In Lua is no thread, but coroutine. Not commonly used by starters.","title":"5.7. Threads"},{"location":"Defold/basic/#6","text":"","title":"6."},{"location":"Python/","text":"Getting Started in Python && basic grammar \u00b6 This is where some of my notes while learning Python, but mostly written afterwards considering I didn't really know how to code before learning Python... Note This site is written in kinda hurry, so some part of code might be directly copied from some site without mentioning, which I hope is not considered offensive in the spirit of sharing pure knowledge. But in case you feel uncomfortable about this, email me directly. Getting Started \u00b6 Note This article is about setting up Python development. Some of the document below is copied from https://www.runoob.com/python3/python3-install.html , greatly appreciated. Tip I would recommend to use git along with github to manage your Python code. Guide Here: https://www.runoob.com/git/git-install-setup.html Windows Platform \u00b6 Installing Python on Windows is recommended to be done through the Visual Studio. Note This method is recommended because Visual Studio comes with better support when updating Python, also it helps setup environment variables automatically. Other recommended ways to install Python on Windows are: Through official release on https://www.python.org/downloads/ Through winget command: winget install python Note winget is a command line tool that comes with Windows 10/11, see https://docs.microsoft.com/zh-cn/windows/package-manager/winget/ Through Windows Store. ( Least recommended due to update and environment variable reasons) Warning Setting up environment variables: See article https://www.runoob.com/python3/python3-install.html You might want to set this NOW , otherwise you might run into errors. macOS Platform \u00b6 Recommended way to install Python on macOS is through homebrew : brew install python Note brew is a package manager for macOS, see https://brew.sh/ Note Installing git is the same, simply run brew install git . Linux Platform \u00b6 See your Linux distribution's documentation for how to install Python. Take Ubuntu as an example: sudo apt install python3 Note git should already be installed on your system, if not, run sudo apt install git to install it. IDE environments \u00b6 Visual Studio Code \u00b6 Note Visual Studio Code is a powerful IDE for Python development. It comes with a lot of features, including syntax highlighting, code completion, and more. It is recommended to use it for ALL Python development. You can download it from https://code.visualstudio.com/download Note Visual Studio Code is available as a command line tool, you can run it by typing code in your terminal. You can also install it through npm : npm install -g code Pycharm \u00b6 Note Pycharm is great for starters, but it is not recommended for large-scale Python development, mainly because lack of extensions support. That is to say, if you want a simple guide-free Python environment setup, you can use Pycharm to get started. You can download it from https://www.jetbrains.com/pycharm/download/ Basic Grammar \u00b6 Note This article is about basic Python grammar. For more details, see https://docs.python.org/3/reference/grammar.html Variable types: \u00b6 One should always start with learning the variable types. In Python, there are six main types of variables: number : number str : string list : list tuple : tuple set : set dict : dictionary Let's start one by one: number type \u00b6 In Python, number type is used to represent all kinds of numbers,including integers , floats , and complex numbers , as well as bool . SubNote I - type() and isinstance() \u00b6 Note In order to find out the type of variable, type type(variable) to find out: >>> type ( 3.0 ) < class ' float '> Warning Another method to determine what kind of variable is is to use isinstance() : >>> isinstance ( 3.0 , float ) True Warning There's a difference between isinstance() and type() : However, you won't encounter the problem until you learn class . For further answers, see here , right now you can consider the following as true: isinstance ( _variable , _type ) # equals to type ( _variable ) == _type Todo Need to replace the link! Basic operations \u00b6 number type has the following arithmetic operations: add : + subtract : - multiply : * The three functions above will only return int when two int are given, otherwise it will return float , or complex . divide : / (This will return a float , even the result is an integer): >>> 4 / 2 2.0 floor division : // (This will return an integer): >>> 5 // 3 1 modulo : % (This will return an integer): >>> 5 % 3 2 power : ** >>> 2 ** 3 8 SubNote II - type \"conversion\" and assigning \u00b6 Tip Python supports assigning two variables at the same time: a , b = 1 , 2 Tip Like a scripting language, Python support changing variable types, just assign whatever you want to the variable: a = 1 # a is now an integer a = 'hello' # a is now a string Error Although the example given is legal, DO NOT USE PYTHON LIKE THAT. Complex type \u00b6 Tip Complex type is usually ignored in most getting-started document. However, it's something quite interesting and new(?) in computer science. Note In Python, the notation for imaginary number is j , NOT i (in some countries are taught as i ). An example: >>> 1 + 2 j ( 1 + 2 j ) Arithmetic operations on complex type are the \"same\" as other number Note floor division and modulo are not supported in complex type, no matter the position. This will result in a TypeError : >>> 1 // 2 j TypeError : unsupported operand type ( s ) for // : 'int' and 'complex' Tip ALL arithmetic operations on complex type will return complex type: >>> ( 1.0 + 4 j ) + ( 1.0 - 4 j ) ( 2 + 0 j ) >>> ( 1.0 + 4 j ) / ( 1.0 - 4 j ) ( - 0.8823529411764706 + 0.47058823529411764 j ) >>> ( 5 + 3 j ) ** ( 2 + 3 j ) ( 6.694563360967683 + 0.585212825721 j ) Complex numbers have some unique properties:","title":"Getting Started in Python && basic grammar"},{"location":"Python/#getting-started-in-python-basic-grammar","text":"This is where some of my notes while learning Python, but mostly written afterwards considering I didn't really know how to code before learning Python... Note This site is written in kinda hurry, so some part of code might be directly copied from some site without mentioning, which I hope is not considered offensive in the spirit of sharing pure knowledge. But in case you feel uncomfortable about this, email me directly.","title":"Getting Started in Python &amp;&amp; basic grammar"},{"location":"Python/#getting-started","text":"Note This article is about setting up Python development. Some of the document below is copied from https://www.runoob.com/python3/python3-install.html , greatly appreciated. Tip I would recommend to use git along with github to manage your Python code. Guide Here: https://www.runoob.com/git/git-install-setup.html","title":"Getting Started"},{"location":"Python/#windows-platform","text":"Installing Python on Windows is recommended to be done through the Visual Studio. Note This method is recommended because Visual Studio comes with better support when updating Python, also it helps setup environment variables automatically. Other recommended ways to install Python on Windows are: Through official release on https://www.python.org/downloads/ Through winget command: winget install python Note winget is a command line tool that comes with Windows 10/11, see https://docs.microsoft.com/zh-cn/windows/package-manager/winget/ Through Windows Store. ( Least recommended due to update and environment variable reasons) Warning Setting up environment variables: See article https://www.runoob.com/python3/python3-install.html You might want to set this NOW , otherwise you might run into errors.","title":"Windows Platform"},{"location":"Python/#macos-platform","text":"Recommended way to install Python on macOS is through homebrew : brew install python Note brew is a package manager for macOS, see https://brew.sh/ Note Installing git is the same, simply run brew install git .","title":"macOS Platform"},{"location":"Python/#linux-platform","text":"See your Linux distribution's documentation for how to install Python. Take Ubuntu as an example: sudo apt install python3 Note git should already be installed on your system, if not, run sudo apt install git to install it.","title":"Linux Platform"},{"location":"Python/#ide-environments","text":"","title":"IDE environments"},{"location":"Python/#visual-studio-code","text":"Note Visual Studio Code is a powerful IDE for Python development. It comes with a lot of features, including syntax highlighting, code completion, and more. It is recommended to use it for ALL Python development. You can download it from https://code.visualstudio.com/download Note Visual Studio Code is available as a command line tool, you can run it by typing code in your terminal. You can also install it through npm : npm install -g code","title":"Visual Studio Code"},{"location":"Python/#pycharm","text":"Note Pycharm is great for starters, but it is not recommended for large-scale Python development, mainly because lack of extensions support. That is to say, if you want a simple guide-free Python environment setup, you can use Pycharm to get started. You can download it from https://www.jetbrains.com/pycharm/download/","title":"Pycharm"},{"location":"Python/#basic-grammar","text":"Note This article is about basic Python grammar. For more details, see https://docs.python.org/3/reference/grammar.html","title":"Basic Grammar"},{"location":"Python/#variable-types","text":"One should always start with learning the variable types. In Python, there are six main types of variables: number : number str : string list : list tuple : tuple set : set dict : dictionary Let's start one by one:","title":"Variable types:"},{"location":"Python/#number-type","text":"In Python, number type is used to represent all kinds of numbers,including integers , floats , and complex numbers , as well as bool .","title":"number type"},{"location":"Python/#subnote-i-type-and-isinstance","text":"Note In order to find out the type of variable, type type(variable) to find out: >>> type ( 3.0 ) < class ' float '> Warning Another method to determine what kind of variable is is to use isinstance() : >>> isinstance ( 3.0 , float ) True Warning There's a difference between isinstance() and type() : However, you won't encounter the problem until you learn class . For further answers, see here , right now you can consider the following as true: isinstance ( _variable , _type ) # equals to type ( _variable ) == _type Todo Need to replace the link!","title":"SubNote I - type() and isinstance()"},{"location":"Python/#basic-operations","text":"number type has the following arithmetic operations: add : + subtract : - multiply : * The three functions above will only return int when two int are given, otherwise it will return float , or complex . divide : / (This will return a float , even the result is an integer): >>> 4 / 2 2.0 floor division : // (This will return an integer): >>> 5 // 3 1 modulo : % (This will return an integer): >>> 5 % 3 2 power : ** >>> 2 ** 3 8","title":"Basic operations"},{"location":"Python/#subnote-ii-type-conversion-and-assigning","text":"Tip Python supports assigning two variables at the same time: a , b = 1 , 2 Tip Like a scripting language, Python support changing variable types, just assign whatever you want to the variable: a = 1 # a is now an integer a = 'hello' # a is now a string Error Although the example given is legal, DO NOT USE PYTHON LIKE THAT.","title":"SubNote II - type \"conversion\" and assigning"},{"location":"Python/#complex-type","text":"Tip Complex type is usually ignored in most getting-started document. However, it's something quite interesting and new(?) in computer science. Note In Python, the notation for imaginary number is j , NOT i (in some countries are taught as i ). An example: >>> 1 + 2 j ( 1 + 2 j ) Arithmetic operations on complex type are the \"same\" as other number Note floor division and modulo are not supported in complex type, no matter the position. This will result in a TypeError : >>> 1 // 2 j TypeError : unsupported operand type ( s ) for // : 'int' and 'complex' Tip ALL arithmetic operations on complex type will return complex type: >>> ( 1.0 + 4 j ) + ( 1.0 - 4 j ) ( 2 + 0 j ) >>> ( 1.0 + 4 j ) / ( 1.0 - 4 j ) ( - 0.8823529411764706 + 0.47058823529411764 j ) >>> ( 5 + 3 j ) ** ( 2 + 3 j ) ( 6.694563360967683 + 0.585212825721 j ) Complex numbers have some unique properties:","title":"Complex type"}]}